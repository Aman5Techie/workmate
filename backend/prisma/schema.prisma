// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum role {
  proposer
  bidder
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      role
  createdAt DateTime @default(now())
  tasks     Task[]   @relation("TaskOfUser")
  answers   Answer[] @relation("userAnswers")
}

model Task {
  id            String     @id @default(uuid())
  title         String
  taskId        String     @unique
  userId        String // users ID
  location      String  // String of google Maps 
  status        String
  Bid           String
  createdAt     DateTime   @default(now())
  description   String
  amenties      String
  amount        Int
  imageurl      String
  state         String
  city          String
  city_district String
  latitide      String
  longitude     String
  tags          Tags[]     @relation("TaskToTag")
  question      Question[] @relation("Questions")
  user          User       @relation("TaskOfUser", fields: [userId], references: [id])
  answer        Answer[]   @relation("taskAnswers")
  
}

model Question {
  id       Int    @id @default(autoincrement())
  question String
  taskId   String
  task     Task   @relation("Questions", fields: [taskId], references: [id],onDelete: Cascade)
}

model Tags {
  id   Int    @id @unique
  name String @unique
  task Task[] @relation("TaskToTag")
}

model Answer {
  id        Int      @id @default(autoincrement())
  questions String[]
  answers   String[]
  userid    String
  taskid    String
  amount    Int
  user      User     @relation("userAnswers", fields: [userid], references: [id],onDelete: Cascade)
  task      Task     @relation("taskAnswers", fields: [taskid], references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userid, taskid])
}

// want to add a created AT and @@Unique()
